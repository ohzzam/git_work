<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jobtrigger">

    <!--    <select id="getJobAndTriggerDetails" resultType="scheduler.model.JobAndTrigger">
    SELECT
    qrtz_job_details.JOB_NAME,
    qrtz_job_details.JOB_GROUP,
    qrtz_job_details.JOB_CLASS_NAME,
    qrtz_triggers.TRIGGER_NAME,
    qrtz_triggers.TRIGGER_GROUP,
    qrtz_simple_triggers.REPEAT_INTERVAL,
    qrtz_simple_triggers.TIMES_TRIGGERED
    FROM
    qrtz_job_details
    JOIN qrtz_triggers
    JOIN qrtz_simple_triggers ON qrtz_job_details.JOB_NAME = qrtz_triggers.JOB_NAME
    AND qrtz_triggers.TRIGGER_NAME = qrtz_simple_triggers.TRIGGER_NAME
    AND qrtz_triggers.TRIGGER_GROUP = qrtz_simple_triggers.TRIGGER_GROUP
    </select>-->
    <select id="getJobAndTriggerDetails" resultType="scheduler.model.JobAndTrigger">
        <!--   SELECT DISTINCT
        QRTZ_JOB_DETAILS.JOB_NAME,
        QRTZ_JOB_DETAILS.JOB_GROUP,
        QRTZ_JOB_DETAILS.JOB_CLASS_NAME,
        QRTZ_TRIGGERS.TRIGGER_NAME,
        QRTZ_TRIGGERS.TRIGGER_GROUP,
        QRTZ_CRON_TRIGGERS.CRON_EXPRESSION,
        QRTZ_CRON_TRIGGERS.TIME_ZONE_ID
        FROM
        QRTZ_JOB_DETAILS
        INNER JOIN QRTZ_TRIGGERS ON QRTZ_TRIGGERS.TRIGGER_GROUP=QRTZ_JOB_DETAILS.JOB_GROUP
        INNER JOIN QRTZ_CRON_TRIGGERS ON QRTZ_JOB_DETAILS.JOB_NAME = QRTZ_TRIGGERS.JOB_NAME
        and QRTZ_TRIGGERS.TRIGGER_NAME = QRTZ_CRON_TRIGGERS.TRIGGER_NAME
        and QRTZ_TRIGGERS.TRIGGER_GROUP = QRTZ_CRON_TRIGGERS.TRIGGER_GROUP-->

SELECT DISTINCT
	QRTZ_JOB_DETAILS.JOB_NAME ,
	QRTZ_JOB_DETAILS.JOB_GROUP ,
	QRTZ_JOB_DETAILS.JOB_CLASS_NAME ,
	QRTZ_TRIGGERS.TRIGGER_NAME ,
	QRTZ_TRIGGERS.TRIGGER_GROUP ,
	QRTZ_CRON_TRIGGERS.CRON_EXPRESSION ,
	QRTZ_CRON_TRIGGERS.TIME_ZONE_ID ,
	TB_JOB_STATUS.LAST_FIRE_TIME ,
	TB_JOB_STATUS.LAST_SUCCESS_TIME
FROM
	QRTZ_JOB_DETAILS
LEFT JOIN QRTZ_TRIGGERS ON QRTZ_TRIGGERS.TRIGGER_GROUP = QRTZ_JOB_DETAILS.JOB_GROUP
LEFT JOIN QRTZ_CRON_TRIGGERS ON QRTZ_JOB_DETAILS.JOB_NAME = QRTZ_TRIGGERS.JOB_NAME
AND QRTZ_TRIGGERS.TRIGGER_NAME = QRTZ_CRON_TRIGGERS.TRIGGER_NAME
AND QRTZ_TRIGGERS.TRIGGER_GROUP = QRTZ_CRON_TRIGGERS.TRIGGER_GROUP
LEFT JOIN TB_JOB_STATUS ON TB_JOB_STATUS.TRIGGER_NAME = QRTZ_TRIGGERS.TRIGGER_NAME AND TB_JOB_STATUS.TRIGGER_GROUP = QRTZ_TRIGGERS.TRIGGER_GROUP
    </select>
    
    <update id="updateJobStatus" parameterType="scheduler.model.JobStatusVo">
            MERGE INTO TB_JOB_STATUS AS a
                    USING DUAL AS b 
                    ON a.TRIGGER_NAME = #{jobTriggerName} AND a.TRIGGER_GROUP = #{jobGroupName} 
                WHEN NOT MATCHED THEN INSERT (TRIGGER_NAME,TRIGGER_GROUP,LAST_FIRE_TIME,LAST_SUCCESS_TIME,RESULT_MSG) 
                    values (#{jobTriggerName}, 
                    #{jobGroupName}, 
                    #{lastFireTime}, 
                    #{lastSuccessTime, jdbcType=TIMESTAMP}, 
                    #{resultMsg, jdbcType=VARCHAR})
                WHEN MATCHED THEN UPDATE SET 
                    a.LAST_FIRE_TIME = #{lastFireTime},
                    a.LAST_SUCCESS_TIME = #{lastSuccessTime, jdbcType=TIMESTAMP},
                    a.RESULT_MSG = #{resultMsg, jdbcType=VARCHAR}
    </update>
    
    <update id="updateLastSuccessTime" parameterType="scheduler.model.JobStatusVo">
            UPDATE TB_JOB_STATUS SET 
                    LAST_SUCCESS_TIME = #{lastSuccessTime, jdbcType=TIMESTAMP}
                WHERE TRIGGER_NAME = #{jobTriggerName} AND TRIGGER_GROUP = #{jobGroupName} 
    </update>
    
    <select id="getJobStatus" resultType="scheduler.model.JobStatusVo" parameterType="scheduler.model.JobStatusVo">
            SELECT TRIGGER_NAME as jobTriggerName
                  ,TRIGGER_GROUP as jobGroupName
                  ,LAST_FIRE_TIME as lastFireTime
                  ,LAST_SUCCESS_TIME as lastSuccessTime
                  ,RESULT_MSG as resultMsg
                FROM TB_JOB_STATUS
                WHERE TRIGGER_NAME = #{jobTriggerName} AND TRIGGER_GROUP = #{jobGroupName} 
    </select>

    <select id="getJobStatusByName" resultType="scheduler.model.JobStatusVo" parameterType="String">
            SELECT TRIGGER_NAME as jobTriggerName
                  ,TRIGGER_GROUP as jobGroupName
                  ,LAST_FIRE_TIME as lastFireTime
                  ,LAST_SUCCESS_TIME as lastSuccessTime
                  ,RESULT_MSG as resultMsg
                FROM TB_JOB_STATUS
                WHERE TRIGGER_NAME = #{jobTriggerName}
    </select>
    
    <delete id="deleteJobStatus" parameterType="scheduler.model.JobStatusVo">
            DELETE FROM TB_JOB_STATUS
                WHERE TRIGGER_NAME = #{jobTriggerName} AND TRIGGER_GROUP = #{jobGroupName} 
    </delete>
    
</mapper>
